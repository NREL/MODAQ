{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MODAQ Documentation Until this message is removed, this guide is in draft and actively being edited. During this time, some sections may be blank or not fully developed. General Overview The National Renewable Energy Laboratory (NREL) has developed a data acquisition system to support laboratory (component) and in-water validation and testing of Marine Renewable Energy (MRE) technologies. The Modular Ocean Data AcQuisition System (MODAQ) is a robust system built on industrial grade hardware that can acquire high-quality and summary data from many sensor and instrument types. MODAQ includes modules to perform real-time QC screening, system health monitoring, and send alerts. MODAQ is also part of a larger data management, processing, visualization, and archiving system. As such, MODAQ consists of three primary components that are designed to provide a flexible hardware and software framework: MODAQ:Field - is the sensor/instrumentation suite with data acquisition hardware. It's designed to be highly configurable to meet the measurement requirements of a specific project. While Field can store its data locally, the power of the MODAQ system is realized when Field has internet connectivity. MODAQ:Cloud - is hosted on AWS and provides an ingestion point for the field data, as well as quality control, processing and analyses layers, data archives, derived products, and collaboration space. The standardized processing of data is accomplished through leveraging the MHKiT Data Pipeline. AWS provides the capability to work on very large datasets efficiently and collaboratively. The open-source MRE data processing software, MHKiT provides the analysis functions for MODAQ. MODAQ:Web - is a web-based dashboard for near real time monitoring of key measurement and health parameters. For bandwidth sensitive deployments, Web uses summary data generated by MODAQ:Field that is transferred to its own AWS bucket and stored in a SQL database. Data are acquired using MODAQ:Field, then sent to MODAQ:Cloud for temporary storage, client access, quality control (QC), and processing. Summary data are sent to MODAQ:Web for real-time visualization. MODAQ also includes a user controlled pipeline to the MHKDR to streamline the submission process. MODAQ is able to support a wide range of missions in the various MRE environments (wave, tidal, river, open ocean), archetypes, and scales with three fundamental missions: Field Deployment, Testing/Validation, and Operation: Provide the field measurement capabilities needed for operations and testing/validation of wave and current MRE technologies at established testing sites (e.g. WETS and PacWave) and at or other sites with limited infrastructure. These RD&D activities include many different in-water tests, such as power performance, power quality, mechanical loads, and health and safety. Component Testing: Provide measurement capabilities and infrastructure needed for component validation/testing such as power performance measurement of a PTO on a dynamometer test stand. Environmental Monitoring: MODAQ can acquire data from sensors and instruments to monitor meteorological or oceanographic parameters concurrently with measurement objectives. For instance, data from a weather station, current meter, and telemetry from a wave buoy could be acquired along with hydrophones measuring underwater sound can provide a more complete picture to the device's power and load measurements. MODAQ:Field MODAQ:Field is the primary focus of this document and it provides the core data acquisition duties including: sensor reading/polling, scaling/conversion, data processing, local storage, and data transmission. It is a standalone system that is based on the National Instruments CompactRIO embedded control and acquisition system, as well as additional components as required, such as a WiFi/Cellular/satellite modem or a network-based power management system. This system provides a high-quality and robust platform that meets the rigorous requirements of IEC certification level testing. MODAQ Field\u2019s modular hardware design allows modules to be swapped out so that it can be rapidly reconfigured to meet custom application requirements. Additional chassis can be connected to the primary chassis to increase the number of measurement modules beyond the 8 slots in the primary chassis. Multiple MODAQ Field systems can be deployed and tightly synchronized via GPS-based timing. The software is also modular, providing a similar reconfiguration capability at the programming level. The National Instruments CompactRIO was chosen as the data acquisition controller since it\u2019s an embedded system that provides a powerful stand-alone acquisition platform with both high-performance FPGA and real-time deterministic processors. The cRIO chassis has up to 8 slots for input/output (I/O) modules and many I/O modules are available to create a customized acquisition system. These have a range of capabilities to read various analog inputs, serial data streams, and digital I/O. The MODAQ software is written in National Instruments LabVIEW, which is a rapid development programming environment commonly used in industrial testing centers. MODAQ Field capabilities include: Data acquisition: bi-directional analog (current and voltage), and digital (RS-232/RS-422/RS-485, USB, IP, etc) channels including temperature, loads/strains, rotations/positions, and pressures. High speed sampling where necessary. Remote management: reconfigure the DAQ and data processing algorithms, and monitor/control power to individual components Data QC: a range of low-level QC checks to verify sensor, instrument, and DAQ operation. Data conversion: data are converted from their raw form (i.e. binary, ratiometric, etc) to scaled values/engineering units. Local data storage Internet and/or local area network file transfers. Configuration utility. System Monitoring and Alerts: real-time monitoring of specified parameters, such as position, temperature, power, etc. with tiered email alerts IEC compliant software modules for power performance, power quality, and mechanical loads. Other modules include motion, availability, and control. Control and automation.","title":"Home"},{"location":"#modaq-documentation","text":"Until this message is removed, this guide is in draft and actively being edited. During this time, some sections may be blank or not fully developed.","title":"MODAQ Documentation "},{"location":"#general-overview","text":"The National Renewable Energy Laboratory (NREL) has developed a data acquisition system to support laboratory (component) and in-water validation and testing of Marine Renewable Energy (MRE) technologies. The Modular Ocean Data AcQuisition System (MODAQ) is a robust system built on industrial grade hardware that can acquire high-quality and summary data from many sensor and instrument types. MODAQ includes modules to perform real-time QC screening, system health monitoring, and send alerts. MODAQ is also part of a larger data management, processing, visualization, and archiving system. As such, MODAQ consists of three primary components that are designed to provide a flexible hardware and software framework: MODAQ:Field - is the sensor/instrumentation suite with data acquisition hardware. It's designed to be highly configurable to meet the measurement requirements of a specific project. While Field can store its data locally, the power of the MODAQ system is realized when Field has internet connectivity. MODAQ:Cloud - is hosted on AWS and provides an ingestion point for the field data, as well as quality control, processing and analyses layers, data archives, derived products, and collaboration space. The standardized processing of data is accomplished through leveraging the MHKiT Data Pipeline. AWS provides the capability to work on very large datasets efficiently and collaboratively. The open-source MRE data processing software, MHKiT provides the analysis functions for MODAQ. MODAQ:Web - is a web-based dashboard for near real time monitoring of key measurement and health parameters. For bandwidth sensitive deployments, Web uses summary data generated by MODAQ:Field that is transferred to its own AWS bucket and stored in a SQL database. Data are acquired using MODAQ:Field, then sent to MODAQ:Cloud for temporary storage, client access, quality control (QC), and processing. Summary data are sent to MODAQ:Web for real-time visualization. MODAQ also includes a user controlled pipeline to the MHKDR to streamline the submission process. MODAQ is able to support a wide range of missions in the various MRE environments (wave, tidal, river, open ocean), archetypes, and scales with three fundamental missions: Field Deployment, Testing/Validation, and Operation: Provide the field measurement capabilities needed for operations and testing/validation of wave and current MRE technologies at established testing sites (e.g. WETS and PacWave) and at or other sites with limited infrastructure. These RD&D activities include many different in-water tests, such as power performance, power quality, mechanical loads, and health and safety. Component Testing: Provide measurement capabilities and infrastructure needed for component validation/testing such as power performance measurement of a PTO on a dynamometer test stand. Environmental Monitoring: MODAQ can acquire data from sensors and instruments to monitor meteorological or oceanographic parameters concurrently with measurement objectives. For instance, data from a weather station, current meter, and telemetry from a wave buoy could be acquired along with hydrophones measuring underwater sound can provide a more complete picture to the device's power and load measurements.","title":"General Overview"},{"location":"#modaqfield","text":"MODAQ:Field is the primary focus of this document and it provides the core data acquisition duties including: sensor reading/polling, scaling/conversion, data processing, local storage, and data transmission. It is a standalone system that is based on the National Instruments CompactRIO embedded control and acquisition system, as well as additional components as required, such as a WiFi/Cellular/satellite modem or a network-based power management system. This system provides a high-quality and robust platform that meets the rigorous requirements of IEC certification level testing. MODAQ Field\u2019s modular hardware design allows modules to be swapped out so that it can be rapidly reconfigured to meet custom application requirements. Additional chassis can be connected to the primary chassis to increase the number of measurement modules beyond the 8 slots in the primary chassis. Multiple MODAQ Field systems can be deployed and tightly synchronized via GPS-based timing. The software is also modular, providing a similar reconfiguration capability at the programming level. The National Instruments CompactRIO was chosen as the data acquisition controller since it\u2019s an embedded system that provides a powerful stand-alone acquisition platform with both high-performance FPGA and real-time deterministic processors. The cRIO chassis has up to 8 slots for input/output (I/O) modules and many I/O modules are available to create a customized acquisition system. These have a range of capabilities to read various analog inputs, serial data streams, and digital I/O. The MODAQ software is written in National Instruments LabVIEW, which is a rapid development programming environment commonly used in industrial testing centers. MODAQ Field capabilities include: Data acquisition: bi-directional analog (current and voltage), and digital (RS-232/RS-422/RS-485, USB, IP, etc) channels including temperature, loads/strains, rotations/positions, and pressures. High speed sampling where necessary. Remote management: reconfigure the DAQ and data processing algorithms, and monitor/control power to individual components Data QC: a range of low-level QC checks to verify sensor, instrument, and DAQ operation. Data conversion: data are converted from their raw form (i.e. binary, ratiometric, etc) to scaled values/engineering units. Local data storage Internet and/or local area network file transfers. Configuration utility. System Monitoring and Alerts: real-time monitoring of specified parameters, such as position, temperature, power, etc. with tiered email alerts IEC compliant software modules for power performance, power quality, and mechanical loads. Other modules include motion, availability, and control. Control and automation.","title":"MODAQ:Field"},{"location":"FAQ/","text":"FAQ Why National Instruments/LabVIEW? The quick answer is ease of use and speed of system development. The longer answer is that NI/LabVIEW has a long history in the testing community and a lot of trust and confidence has been established over the years. This is important in testing, since the integrity of the test results must withstand scrutiny and be trustworthy. National Instruments takes the necessary effort to qualify its hardware and produce specifications that are reliable. They design to standards' compliance and note the applicable standards in the product documentation. Since most of the NI hardware used in MODAQ have been in production for many years, any issues have been long resolved. It's just one less thing to worry about. NI hardware can be used with many common programming languages, such as C and python, however LabVIEW excels at integration with NI hardware and rapid software development. LabVIEW differs from most other common programming languages in that instead of lines of text, it uses a graphical approach that emphasizes dataflow. The graphical simplicity betrays its inherent power. LabVIEW greatly simplifies tasks such as multitasking, I/O operations, GUIs or HMIs, and binary file saves, to name a few. Programming in LabVIEW can actually be fun. All that said, becoming skilled at LabVIEW can take years of dedicated study and practice. Many advanced concepts, like many of those used in MODAQ, require (or at very least, benefit from) competence in several disciplines including data acquisition, mathematics, control theory, sensors and instrumentation, electrical and computer engineering, and electrical circuits/components. Why not just use generic DAQ controllers? There are a lot of options out there, but it does not take long to realize that: You're just trading one ecosystem for another. Specification to price ratio might be (much) worse. Documentation and libraries may be lacking. Device compatibility may become a bit of an issue. Your preferred programming language or operating system might not be supported. Software still needs to be developed (or in some cases configured) to achieve expected results. It could end up being a lot of work! Of course it depends on individual needs and expectations, but whether going with National Instruments or an alternative, there's no getting away from the tasks of programming the system and assuring it will perform to expectations and deliver quality results. Some vendors sell controllers and I/O modules and offer software packages that require some configuration to achieve basic and limited data acquisition that can be considered on the easy end of the spectrum. However, doing anything beyond simple acquisitions often requires accessing a vendor supplied API and writing code in a traditional language like C/C++ or python - or worse - writing code in a vendor developed scripting language. There's a class of controllers that include an array of built-in I/O that are nice, well thought out, easy to configure, and performant, however under closer inspection, they lack some key features that make them unsuitable in an embedded application deployed in the field. For example, these options generally have limited data logging capability, supporting only small (usually 64 GB or less) and slow microSD cards. There's also limitations when it comes to more technical matters, such as sampling speed, multiplexing (or scanning) vs simultaneous sampling, data synchronization, bit depth, multitasking, determinism, and noise. They also lack flexibility of local filtering or signal processing of data, local QC, and communications/remote supervision. Of course, use case and measurement objectives matter, so these can be perfectly fine for some applications. Why is my sensor/instrument not supported? There are a lot of sensors and instruments available at various price-points with different interfacing requirements. With the exception of devices with simple, voltage or current varying outputs, devices tend to have a protocol, API, or unique data stream that requires custom code (drivers) to acquire the measurement data. Even different models of a similar device from the same manufacturer could have significant differences in the way the device 'talks'. Writing a new driver can range from trivial to complex, dependent on how the data are acquired from the device and/or the data formatting employed by the manufacturer. NREL will share drivers for hardware previously written for MODAQ. For NREL to develop custom MODAQ drivers, please see the FAQ question below about working with NREL . Why not use something like a RaspberryPi or Arduino? While RaspberryPis, Arduinos, and other similar devices are best known in the hobbyist realm, they have become quite prevalent in research and commercial applications. In fact, these devices are finding their way into PLCs and other industrial equipment and have demonstrated reliability. However, there's always considerations and trade-offs to be made. For instance: Mass produced, general purpose boards designed to meet hobbyist price-points might not be built to exacting standards and there could be considerable differences in component quality and design tolerances. This could include boards that use generic, knock-off, counterfeit, binned, or grey-market variants of key components. They might use cheap alternatives that compromise performance in demanding applications- such as poor-quality oscillators or low-efficiency regulators. Circuit boards may have cold solder joints or sloppy solder bridges. They may be unable to cope with or survive over-voltage, polarity reversals, and/or electrostatic discharge like purpose-built hardware. Insufficient attention may be paid to proper grounding and/or isolation to crosstalk and external interference. The board may not be survivable in punishing applications where it might be subject to temperature extremes, humidity, vibrations, and/or high shock. There is probably very little or questionable validation of published specifications. They might not be designed for 24/7 uptime and applications that push them to their limits and could suffer from overheating and/or intermittency. Many devices, particularly the microcontrollers, have limited storage options, with most only supporting microSD cards with small capacity and slow read/write speeds. And, code still needs to be written so that the hardware can acquire data and perform related tasks. The developer assumes the risk of assuring the code is performant, stable, and can provide some level of determinism. It should not be unexpected for the software development costs to vastly eclipse the cost of the hardware. Therefore, it might be economically more advantageous to go with a trusted, packaged solution rather than DIY it. That said, NREL has developed DAQ solutions based on the Espressif ESP32 platform for less demanding use-cases that require a small, light weight form-factor and/or operable on battery power. Details of this system are expected to be published to the NREL Github in 2023. Can NREL help configure or customize MODAQ? MODAQ is funded by the Department of Energy's Water Power Technology Office for the purpose of advancing the development and testing of Marine Renewable Energy devices. There are mechanisms in place for large and small organizations to engage NREL.","title":"FAQ"},{"location":"FAQ/#faq","text":"","title":"FAQ"},{"location":"FAQ/#why-national-instrumentslabview","text":"The quick answer is ease of use and speed of system development. The longer answer is that NI/LabVIEW has a long history in the testing community and a lot of trust and confidence has been established over the years. This is important in testing, since the integrity of the test results must withstand scrutiny and be trustworthy. National Instruments takes the necessary effort to qualify its hardware and produce specifications that are reliable. They design to standards' compliance and note the applicable standards in the product documentation. Since most of the NI hardware used in MODAQ have been in production for many years, any issues have been long resolved. It's just one less thing to worry about. NI hardware can be used with many common programming languages, such as C and python, however LabVIEW excels at integration with NI hardware and rapid software development. LabVIEW differs from most other common programming languages in that instead of lines of text, it uses a graphical approach that emphasizes dataflow. The graphical simplicity betrays its inherent power. LabVIEW greatly simplifies tasks such as multitasking, I/O operations, GUIs or HMIs, and binary file saves, to name a few. Programming in LabVIEW can actually be fun. All that said, becoming skilled at LabVIEW can take years of dedicated study and practice. Many advanced concepts, like many of those used in MODAQ, require (or at very least, benefit from) competence in several disciplines including data acquisition, mathematics, control theory, sensors and instrumentation, electrical and computer engineering, and electrical circuits/components.","title":"Why National Instruments/LabVIEW?"},{"location":"FAQ/#why-not-just-use-generic-daq-controllers","text":"There are a lot of options out there, but it does not take long to realize that: You're just trading one ecosystem for another. Specification to price ratio might be (much) worse. Documentation and libraries may be lacking. Device compatibility may become a bit of an issue. Your preferred programming language or operating system might not be supported. Software still needs to be developed (or in some cases configured) to achieve expected results. It could end up being a lot of work! Of course it depends on individual needs and expectations, but whether going with National Instruments or an alternative, there's no getting away from the tasks of programming the system and assuring it will perform to expectations and deliver quality results. Some vendors sell controllers and I/O modules and offer software packages that require some configuration to achieve basic and limited data acquisition that can be considered on the easy end of the spectrum. However, doing anything beyond simple acquisitions often requires accessing a vendor supplied API and writing code in a traditional language like C/C++ or python - or worse - writing code in a vendor developed scripting language. There's a class of controllers that include an array of built-in I/O that are nice, well thought out, easy to configure, and performant, however under closer inspection, they lack some key features that make them unsuitable in an embedded application deployed in the field. For example, these options generally have limited data logging capability, supporting only small (usually 64 GB or less) and slow microSD cards. There's also limitations when it comes to more technical matters, such as sampling speed, multiplexing (or scanning) vs simultaneous sampling, data synchronization, bit depth, multitasking, determinism, and noise. They also lack flexibility of local filtering or signal processing of data, local QC, and communications/remote supervision. Of course, use case and measurement objectives matter, so these can be perfectly fine for some applications.","title":"Why not just use generic DAQ controllers?"},{"location":"FAQ/#why-is-my-sensorinstrument-not-supported","text":"There are a lot of sensors and instruments available at various price-points with different interfacing requirements. With the exception of devices with simple, voltage or current varying outputs, devices tend to have a protocol, API, or unique data stream that requires custom code (drivers) to acquire the measurement data. Even different models of a similar device from the same manufacturer could have significant differences in the way the device 'talks'. Writing a new driver can range from trivial to complex, dependent on how the data are acquired from the device and/or the data formatting employed by the manufacturer. NREL will share drivers for hardware previously written for MODAQ. For NREL to develop custom MODAQ drivers, please see the FAQ question below about working with NREL .","title":"Why is my sensor/instrument not supported?"},{"location":"FAQ/#why-not-use-something-like-a-raspberrypi-or-arduino","text":"While RaspberryPis, Arduinos, and other similar devices are best known in the hobbyist realm, they have become quite prevalent in research and commercial applications. In fact, these devices are finding their way into PLCs and other industrial equipment and have demonstrated reliability. However, there's always considerations and trade-offs to be made. For instance: Mass produced, general purpose boards designed to meet hobbyist price-points might not be built to exacting standards and there could be considerable differences in component quality and design tolerances. This could include boards that use generic, knock-off, counterfeit, binned, or grey-market variants of key components. They might use cheap alternatives that compromise performance in demanding applications- such as poor-quality oscillators or low-efficiency regulators. Circuit boards may have cold solder joints or sloppy solder bridges. They may be unable to cope with or survive over-voltage, polarity reversals, and/or electrostatic discharge like purpose-built hardware. Insufficient attention may be paid to proper grounding and/or isolation to crosstalk and external interference. The board may not be survivable in punishing applications where it might be subject to temperature extremes, humidity, vibrations, and/or high shock. There is probably very little or questionable validation of published specifications. They might not be designed for 24/7 uptime and applications that push them to their limits and could suffer from overheating and/or intermittency. Many devices, particularly the microcontrollers, have limited storage options, with most only supporting microSD cards with small capacity and slow read/write speeds. And, code still needs to be written so that the hardware can acquire data and perform related tasks. The developer assumes the risk of assuring the code is performant, stable, and can provide some level of determinism. It should not be unexpected for the software development costs to vastly eclipse the cost of the hardware. Therefore, it might be economically more advantageous to go with a trusted, packaged solution rather than DIY it. That said, NREL has developed DAQ solutions based on the Espressif ESP32 platform for less demanding use-cases that require a small, light weight form-factor and/or operable on battery power. Details of this system are expected to be published to the NREL Github in 2023.","title":"Why not use something like a RaspberryPi or Arduino?"},{"location":"FAQ/#can-nrel-help-configure-or-customize-modaq","text":"MODAQ is funded by the Department of Energy's Water Power Technology Office for the purpose of advancing the development and testing of Marine Renewable Energy devices. There are mechanisms in place for large and small organizations to engage NREL.","title":"Can NREL help configure or customize MODAQ?"},{"location":"about/","text":"","title":"About"},{"location":"dev_modules/","text":"Optional and Development Modules","title":"Optional Modules"},{"location":"dev_modules/#optional-and-development-modules","text":"","title":"Optional and Development Modules"},{"location":"h_architecture/","text":"MODAQ Hardware Architecture The Controller The core hardware platform that MODAQ is built upon is the CompactRIO (cRIO) from National Instruments and the software code base is developed in National Instruments LabVIEW. A cRIO is a compact and ruggedized industrial embedded controller that serves as the 'brains' of MODAQ. It contains the central processing unit and the usual components that one would expect with a computer, such as RAM, network interfaces, USB ports, and internal storage. In addition, the cRIO contains an expansion backplane for up to 8 I/O modules in a single chassis that is running a real-time Linux kernel and has an FPGA for high-performance and specialized applications. While MODAQ is scalable and can run on any Linux-based cRIO - including models long discontinued by NI, the reference design presented in this documentation is built on the highest performance cRIO available at the time of writing, the cRIO-9049 . There may be some features implemented in MODAQ that are unavailable to older, lower-powered cRIO controllers, such as DAQmx and TSN. It's important to consider that the power and capabilities of the cRIO hardware is consistent with the application requirements and performance expectations. Modular I/O In order to interface with sensors and instruments, the cRIO provides up to 8 slots for special-function I/O modules. Without any modules installed, most cRIOs can connect to instruments that communicate over USB, ethernet, and/or RS-232/485. Unfortunately, most applications will require additional modules. MODAQ is not limited to 8 modules, since it leverages the expansion and distributed options available within the NI ecosystem. The size of a MODAQ build will be governed by the type and number of inputs and/or outputs that the application requires. Most modules contain multiple I/O channels. For instance, in the diagram below, the NI-9249 (\u00b110V voltage input module) can connect up to four voltage sources on a single module. For clarity on the distinction between a sensor and instrument, a sensor is a device that varies its output in some proportion to a quantity it's designed to measure. For instance a temperature sensor (such as an RTD) varies its resistance in a calibrated response to temperature. While an instrument can contain one or more sensors and usually has some onboard processing that outputs a signal of some sort (such serial, MODBUS), though some instruments can output an analog signal. An example of an instrument would be an IMU (Inertial Measurement Unit) which contains an accelerometer and rate gyro and can output a raw stream of the sensor data or highly processed attitude data over an RS-232 serial connection. General I/O Support MODAQ currently supports a wide variety of sensors and instruments that cover the vast majority of measurement requirements for MRE systems. This list is not exhaustive. Voltages 0 - 300 V rms \u00b110 V PTs/CTs Current 0 - 50 A rms \u00b120 mA Temperatures RTD Thermocouples Strain 1/4 - full bridge Load cells Position Rotary and/or linear Encoder Resolver GPS Position Heading Motions IMU/INS/AHRS An example diagram of a baseline MODAQ configured cRIO with I/O modules is shown to the right. I/O Modifications While MODAQ has the flexibility to interface with many kinds of sensors and instruments, some development effort should be expected to create drivers to support new hardware and/or hardware of different specification from those previously used. In addition, modification of existing code may be required to meet specific project requirements that cannot be accomplished through the MODAQ Configurator Utility. Hypothetical examples that might require software modifications: Ingestors/decoders for additional or different instrument parameters. Example: Project requires the NED instead of ECEF coordinate reference frame from the IMU. Changes to hardware signal type. Example: MODAQ currently supports a variant of hardware with an analog \u00b110 VDC signal, however project sources a version that uses a serial output. Significant departure from baseline sampling support. Example: A MODAQ ingestor as written can support a maximum sample rate of 5 kHz for a particular device, however project requires 50 kHz sampling. Since projects are rarely identical, some modification should be expected to accommodate such differences.","title":"Hardware Overview"},{"location":"h_architecture/#modaq-hardware-architecture","text":"","title":"MODAQ Hardware Architecture"},{"location":"h_architecture/#the-controller","text":"The core hardware platform that MODAQ is built upon is the CompactRIO (cRIO) from National Instruments and the software code base is developed in National Instruments LabVIEW. A cRIO is a compact and ruggedized industrial embedded controller that serves as the 'brains' of MODAQ. It contains the central processing unit and the usual components that one would expect with a computer, such as RAM, network interfaces, USB ports, and internal storage. In addition, the cRIO contains an expansion backplane for up to 8 I/O modules in a single chassis that is running a real-time Linux kernel and has an FPGA for high-performance and specialized applications. While MODAQ is scalable and can run on any Linux-based cRIO - including models long discontinued by NI, the reference design presented in this documentation is built on the highest performance cRIO available at the time of writing, the cRIO-9049 . There may be some features implemented in MODAQ that are unavailable to older, lower-powered cRIO controllers, such as DAQmx and TSN. It's important to consider that the power and capabilities of the cRIO hardware is consistent with the application requirements and performance expectations.","title":"The Controller"},{"location":"h_architecture/#modular-io","text":"In order to interface with sensors and instruments, the cRIO provides up to 8 slots for special-function I/O modules. Without any modules installed, most cRIOs can connect to instruments that communicate over USB, ethernet, and/or RS-232/485. Unfortunately, most applications will require additional modules. MODAQ is not limited to 8 modules, since it leverages the expansion and distributed options available within the NI ecosystem. The size of a MODAQ build will be governed by the type and number of inputs and/or outputs that the application requires. Most modules contain multiple I/O channels. For instance, in the diagram below, the NI-9249 (\u00b110V voltage input module) can connect up to four voltage sources on a single module. For clarity on the distinction between a sensor and instrument, a sensor is a device that varies its output in some proportion to a quantity it's designed to measure. For instance a temperature sensor (such as an RTD) varies its resistance in a calibrated response to temperature. While an instrument can contain one or more sensors and usually has some onboard processing that outputs a signal of some sort (such serial, MODBUS), though some instruments can output an analog signal. An example of an instrument would be an IMU (Inertial Measurement Unit) which contains an accelerometer and rate gyro and can output a raw stream of the sensor data or highly processed attitude data over an RS-232 serial connection.","title":"Modular I/O"},{"location":"h_architecture/#general-io-support","text":"MODAQ currently supports a wide variety of sensors and instruments that cover the vast majority of measurement requirements for MRE systems. This list is not exhaustive. Voltages 0 - 300 V rms \u00b110 V PTs/CTs Current 0 - 50 A rms \u00b120 mA Temperatures RTD Thermocouples Strain 1/4 - full bridge Load cells Position Rotary and/or linear Encoder Resolver GPS Position Heading Motions IMU/INS/AHRS An example diagram of a baseline MODAQ configured cRIO with I/O modules is shown to the right.","title":"General I/O Support"},{"location":"h_architecture/#io-modifications","text":"While MODAQ has the flexibility to interface with many kinds of sensors and instruments, some development effort should be expected to create drivers to support new hardware and/or hardware of different specification from those previously used. In addition, modification of existing code may be required to meet specific project requirements that cannot be accomplished through the MODAQ Configurator Utility. Hypothetical examples that might require software modifications: Ingestors/decoders for additional or different instrument parameters. Example: Project requires the NED instead of ECEF coordinate reference frame from the IMU. Changes to hardware signal type. Example: MODAQ currently supports a variant of hardware with an analog \u00b110 VDC signal, however project sources a version that uses a serial output. Significant departure from baseline sampling support. Example: A MODAQ ingestor as written can support a maximum sample rate of 5 kHz for a particular device, however project requires 50 kHz sampling. Since projects are rarely identical, some modification should be expected to accommodate such differences.","title":"I/O Modifications"},{"location":"links/","text":"Useful Links CompactRIO Developer's Guide","title":"Useful Links"},{"location":"links/#useful-links","text":"CompactRIO Developer's Guide","title":"Useful Links"},{"location":"ref_design/","text":"MODAQ Reference Design Manual Since each project tends to be unique and measurement objectives can vary considerably, there is no typical configuration that will satisfy all situations. Instead, most MODAQ builds start from a common base configuration that encompasses features commonly used in MRE DAQ projects. While that still might not be suitable for all applications, it provides a good starting point and model for discussion. This reference design is just that- a reference design. If an end user were to buy the same hardware, configure it the same way, and use the linked MODAQ-Core Reference Design code, the user should be able to set up a functional MODAQ system. Some topics discussed below are covered in greater detail in the Technical Reference section of this document. MODAQ Hardware Reference Design Figure 1. National Instruments hardware configured to the MODAQ:RD specification. Modules should be populated in the order shown, starting with NI-9467 in slot 1, followed by NI-9870 and two NI-9239 modules. This reference design (MODAQ:RD) has been built and tested on the cRIO-9049 embedded controller, however MODAQ code will likely run on most current cRIO variants with Intel processors and the Linux real time kernel (cRIO-904x and cRIO-905x series), with little to no modification. Tech Note: National Instruments introduced DAQmx and Time Sensitive Networking (TSN) support to cRIOs beginning with the 904x and 905x series. To meet more demanding requirements, particularly for large designs with lots of I/O, MODAQ now uses DAQmx in the core design. These larger designs require TSN to assure precision timing and synchronization between multiple chassis. The core MODAQ configuration, before consideration of device-specific measurement objectives, includes a GPS timekeeper module, GPS position module, and an Inertial Navigation System (INS) for heading and attitude. As a basic system, the MODAQ:RD is designed to acquire 3-phase voltage and current from a generator or PTO (power take off) at sample rates up to 50 kHz at 24 bit resolution for power characterization. Essentially, this is the core configuration with added voltage input cards. Here is a list of the required National Instruments hardware: cRIO-9049 controller NI-9467 time synchronization module NI-9870 4 port RS232 serial module NI-9239 \u00b110v voltage input module (quantity: 2) Tech Note: This design assumes the use of PTs and CTs (potential and current transducers) that output a voltage proportional to the signal under measure in the range of \u00b110 V DC (example Verivolt IsoBlock V). MODAQ can also be configured to measure PT/CTs that have outputs up to 300 V rms (PT) and 5 A rms (CT), but for safety considerations NREL recommends using PT/CTs with low voltage outputs where possible. The higher voltage and amperage output option is implemented in FPGA for high speed acquisition and this code is not provided by default with the reference software. Please contact NREL for more information. The following additional hardware is supported in the reference distribution of the MODAQ code: GPS antenna (for NI-9467) INS Advanced Navigation - Spatial Dual 1 XSens - MTi-G Yost 3-Space LORD Microstrain - 3DM-GX4-45 Teledyne TSS - DMS-05 GPS, Heading, and Heave Hemisphere - V104 USB SSD storage device It should be noted at this point that NREL typically incorporates higher-end INS devices in its system specification. Most of the units listed here sell for several thousands of dollars. Depending on measurement objectives and quality expectations, cheaper instruments may be used, however MODAQ drivers or decoder/parsers for devices not appearing on this list will need to be written. Also, the V104 (which as been succeeded by the V123 or V200) is a dual GPS self-contained in the antenna unit. It provides heading and heave in addition to position. Again, a project may elect to substitute a cheaper, less capable device. SInce MODAQ parses the standard NMEA-0183 GPS sentences, MODAQ code modifications should be minor. Setup A detailed hook up guide will not be provided here, however MODAQ will expect the I/O modules to be in the slots as indicated in Figure 1 above and the sensors/instruments attached to the I/O modules in the following order: INS (Slot 2, Channel 1) GPS (Slot 2, Channel 2) V a (Slot 3, Channel 1) V b (Slot 3, Channel 2) V c (Slot 3, Channel 3) I a (Slot 4, Channel 1) I b (Slot 4, Channel 2) I c (Slot 4, Channel 3) WARNING: Only connect PT/CTs with \u00b110 VDC outputs to MODAQ. Do not connect MODAQ directly to a generator's 3 phase AC lines. If unsure, please consult with the appropriate electrical expertise prior to attaching MODAQ to an energized system. MODAQ Software Reference Design NREL provides the MODAQ:RD LabVIEW source code in this repository and users are free to use and modify this code under the Revised BSD License applicable open source licensing terms. LabVIEW To view, modify, and/or deploy MODAQ:RD from the source code, the following LabVIEW development environment is required: LabVIEW 2019 (32-bit) 2 Full or Professional Development Editions LabVIEW Real-Time Module add on LabVIEW FPGA Module add on MODAQ:RD has not been tested on versions of LabVIEW newer than 2019SP1. Chances are that later versions of LabVIEW will run MODAQ:RD fine, but LabVIEW will recompile (upgrade) the MODAQ code to the later version- which will not be backward compatible. Keep this in mind if you intend to contribute back to this project or post issues to the repository. National Instruments now only offers LabVIEW as a software subscription and the current cost for the required packages is $4,654.00 to $5,762.00 per annum (there is no discount for buying multiyear). NI offers a \"Debug and Deployment\" version of LabVIEW as a perpetual license that is intended to be used for modifying existing code and deploying it on targets. It is recommended to review the license terms for the Debug and Deployment edition to understand what uses are allowed and whether it's a suitable alternative to the pricier development editions. Either way, LabVIEW is a very sophisticated and capable programming language that can take years to master. A programmer skilled in other languages, such as C/C++ or Python, may be able to gain sufficient LabVIEW competence in short time to modify/customize and deploy the MODAQ:RD code. NI offers both free and paid tutorials and courses for learning LabVIEW and a tiered Certification Program . Aside from going the route of getting a LabVIEW license and in-house LabVIEW expertise, there are a couple of additional options. Hire a LabVIEW consultant . Download the pre-compiled MODAQ:RD executable from this repository and deploy it manually following these instructions. The caveats here are: The cRIO must be set up with the same modules in same slots as shown in the reference design. No additional I/O modules can be added. Some programmatic features can be configured in the included Configurator app. Please see the section describing the Configurator for more detail. Configurator A stand-alone configurator utility is provided to customize various settings within MODAQ. This was developed to avoid 'hard-coding' values within the software and allow more flexibility without having to edit the source code and recompile the executable. Since this MODAQ:RD is a relatively simple implementation of MODAQ, the included Configurator is similarly simple. Settings made in the Configurator are saved to an XML file that is loaded by MODAQ on startup. Therefore, any changes made in the Configurator while MODAQ is running will be ignored until the system is restarted. In a pinch, it is possible to manually edit the XML file in a text editor, however this is not recommended since it could render the file unreadable to MODAQ. The Configurator runs on the user's local computer and the resulting XML file must be moved to MODAQ manually. MODAQ will expect to find the file (MODAQ RD Configuration File.xml) in the root folder of the storage drive located at /media/sdb1/. Ironically, the location and name of the configuration file are hard-coded in MODAQ and cannot be changed in the Configurator. When MODAQ starts up, it auto-archives a copy of the loaded configuration to the /media/sdb1/Logs/ folder. This provides a reference of what configurations were applied for any given run. Local Storage The NI-9049 cRIO controller has 16GB of onboard storage and also contains an SD card slot. Paths to the preferred data storage location can be set in the Configurator. Since the onboard storage is relatively small and shared with the Real-Time Linux operating system it's not recommended to use this storage for measurement data. An SD card is a viable option, but these can be slow and have reliability issues. National Instruments specifies industrial UHS-I SD cards for the cRIO controller with capacities up to 32 GB. The preferred option is to use an SSD drive connected to one of the USB 3.1 Type-C ports (the USB-A port is limited to USB 2.0 specification) on the controller. This way, speed and capacity are no longer an issue. TDMS All measurement data generated in MODAQ is saved to the binary TDMS format. As mentioned in the Software Architecture section, TDMS can be read in Excel (with this plug in ), MATLAB , and python , or TDMS data can be viewed, manipulated, and exported with 3rd party tools such as Scout . See the technical reference section for more detail on how TDMS is used in MODAQ. Summary Files In addition to the binary TDMS files, most MODAQ modules also create a comma separated value (CSV) text file called a summery file. These are \"summary\" files in the sense that in most cases they contain sub-sampled, resampled, or statistical versions of the raw measurement data that are easier to upload over low bandwidth connections. Summary file upload interval can be set in the Configurator. AWS S3 MODAQ uses AWS S3 for programmatic data transfers. Users can independently enable S3 uploads of the TDMS and summary files in the Configurator. They can also set their AWS access and secret keys, as well as the desired S3 bucket. Since TDMS files can become large, users should evaluate available network bandwidth and data transfer costs before enabling the TDMS upload option. Slow TDMS file transfers could impact measurement determinism and in some cases, data may be generated at a rate faster than the available transfer speed. Email Various events within MODAQ can be set to issue an email alert to a distribution list. This is useful for monitoring for exception conditions and users are encouraged to set email alerts judiciously in order to avoid email fatigue. Settings for the email server address, account credentials, and distribution list email addresses are done in the Configurator. Watch Circle MODAQ:RD includes a watch circle feature. Since most field deployments are quasi-stationary, like in the case of a surface buoy, the watch circle can alert users by email if the device moves beyond a preset distance from its mooring location. Watch circle preferences and alert radii are set in the Configurator. The Spatial Dual also includes a dual GPS receiver, which can not only give highly precise positioning data but also determine heading. It also covers both the positioning and attitude tasks and has internal sensor fusion to control IMU drift. \u21a9 32 bit LabVIEW is required, since the 64 bit does not support the Real-Time Module. \u21a9","title":"Reference Design Manual"},{"location":"ref_design/#modaq-reference-design-manual","text":"Since each project tends to be unique and measurement objectives can vary considerably, there is no typical configuration that will satisfy all situations. Instead, most MODAQ builds start from a common base configuration that encompasses features commonly used in MRE DAQ projects. While that still might not be suitable for all applications, it provides a good starting point and model for discussion. This reference design is just that- a reference design. If an end user were to buy the same hardware, configure it the same way, and use the linked MODAQ-Core Reference Design code, the user should be able to set up a functional MODAQ system. Some topics discussed below are covered in greater detail in the Technical Reference section of this document.","title":"MODAQ Reference Design Manual"},{"location":"ref_design/#modaq-hardware-reference-design","text":"Figure 1. National Instruments hardware configured to the MODAQ:RD specification. Modules should be populated in the order shown, starting with NI-9467 in slot 1, followed by NI-9870 and two NI-9239 modules. This reference design (MODAQ:RD) has been built and tested on the cRIO-9049 embedded controller, however MODAQ code will likely run on most current cRIO variants with Intel processors and the Linux real time kernel (cRIO-904x and cRIO-905x series), with little to no modification. Tech Note: National Instruments introduced DAQmx and Time Sensitive Networking (TSN) support to cRIOs beginning with the 904x and 905x series. To meet more demanding requirements, particularly for large designs with lots of I/O, MODAQ now uses DAQmx in the core design. These larger designs require TSN to assure precision timing and synchronization between multiple chassis. The core MODAQ configuration, before consideration of device-specific measurement objectives, includes a GPS timekeeper module, GPS position module, and an Inertial Navigation System (INS) for heading and attitude. As a basic system, the MODAQ:RD is designed to acquire 3-phase voltage and current from a generator or PTO (power take off) at sample rates up to 50 kHz at 24 bit resolution for power characterization. Essentially, this is the core configuration with added voltage input cards. Here is a list of the required National Instruments hardware: cRIO-9049 controller NI-9467 time synchronization module NI-9870 4 port RS232 serial module NI-9239 \u00b110v voltage input module (quantity: 2) Tech Note: This design assumes the use of PTs and CTs (potential and current transducers) that output a voltage proportional to the signal under measure in the range of \u00b110 V DC (example Verivolt IsoBlock V). MODAQ can also be configured to measure PT/CTs that have outputs up to 300 V rms (PT) and 5 A rms (CT), but for safety considerations NREL recommends using PT/CTs with low voltage outputs where possible. The higher voltage and amperage output option is implemented in FPGA for high speed acquisition and this code is not provided by default with the reference software. Please contact NREL for more information. The following additional hardware is supported in the reference distribution of the MODAQ code: GPS antenna (for NI-9467) INS Advanced Navigation - Spatial Dual 1 XSens - MTi-G Yost 3-Space LORD Microstrain - 3DM-GX4-45 Teledyne TSS - DMS-05 GPS, Heading, and Heave Hemisphere - V104 USB SSD storage device It should be noted at this point that NREL typically incorporates higher-end INS devices in its system specification. Most of the units listed here sell for several thousands of dollars. Depending on measurement objectives and quality expectations, cheaper instruments may be used, however MODAQ drivers or decoder/parsers for devices not appearing on this list will need to be written. Also, the V104 (which as been succeeded by the V123 or V200) is a dual GPS self-contained in the antenna unit. It provides heading and heave in addition to position. Again, a project may elect to substitute a cheaper, less capable device. SInce MODAQ parses the standard NMEA-0183 GPS sentences, MODAQ code modifications should be minor.","title":"MODAQ Hardware Reference Design"},{"location":"ref_design/#setup","text":"A detailed hook up guide will not be provided here, however MODAQ will expect the I/O modules to be in the slots as indicated in Figure 1 above and the sensors/instruments attached to the I/O modules in the following order: INS (Slot 2, Channel 1) GPS (Slot 2, Channel 2) V a (Slot 3, Channel 1) V b (Slot 3, Channel 2) V c (Slot 3, Channel 3) I a (Slot 4, Channel 1) I b (Slot 4, Channel 2) I c (Slot 4, Channel 3) WARNING: Only connect PT/CTs with \u00b110 VDC outputs to MODAQ. Do not connect MODAQ directly to a generator's 3 phase AC lines. If unsure, please consult with the appropriate electrical expertise prior to attaching MODAQ to an energized system.","title":"Setup"},{"location":"ref_design/#modaq-software-reference-design","text":"NREL provides the MODAQ:RD LabVIEW source code in this repository and users are free to use and modify this code under the Revised BSD License applicable open source licensing terms.","title":"MODAQ Software Reference Design"},{"location":"ref_design/#labview","text":"To view, modify, and/or deploy MODAQ:RD from the source code, the following LabVIEW development environment is required: LabVIEW 2019 (32-bit) 2 Full or Professional Development Editions LabVIEW Real-Time Module add on LabVIEW FPGA Module add on MODAQ:RD has not been tested on versions of LabVIEW newer than 2019SP1. Chances are that later versions of LabVIEW will run MODAQ:RD fine, but LabVIEW will recompile (upgrade) the MODAQ code to the later version- which will not be backward compatible. Keep this in mind if you intend to contribute back to this project or post issues to the repository. National Instruments now only offers LabVIEW as a software subscription and the current cost for the required packages is $4,654.00 to $5,762.00 per annum (there is no discount for buying multiyear). NI offers a \"Debug and Deployment\" version of LabVIEW as a perpetual license that is intended to be used for modifying existing code and deploying it on targets. It is recommended to review the license terms for the Debug and Deployment edition to understand what uses are allowed and whether it's a suitable alternative to the pricier development editions. Either way, LabVIEW is a very sophisticated and capable programming language that can take years to master. A programmer skilled in other languages, such as C/C++ or Python, may be able to gain sufficient LabVIEW competence in short time to modify/customize and deploy the MODAQ:RD code. NI offers both free and paid tutorials and courses for learning LabVIEW and a tiered Certification Program . Aside from going the route of getting a LabVIEW license and in-house LabVIEW expertise, there are a couple of additional options. Hire a LabVIEW consultant . Download the pre-compiled MODAQ:RD executable from this repository and deploy it manually following these instructions. The caveats here are: The cRIO must be set up with the same modules in same slots as shown in the reference design. No additional I/O modules can be added. Some programmatic features can be configured in the included Configurator app. Please see the section describing the Configurator for more detail.","title":"LabVIEW"},{"location":"ref_design/#configurator","text":"A stand-alone configurator utility is provided to customize various settings within MODAQ. This was developed to avoid 'hard-coding' values within the software and allow more flexibility without having to edit the source code and recompile the executable. Since this MODAQ:RD is a relatively simple implementation of MODAQ, the included Configurator is similarly simple. Settings made in the Configurator are saved to an XML file that is loaded by MODAQ on startup. Therefore, any changes made in the Configurator while MODAQ is running will be ignored until the system is restarted. In a pinch, it is possible to manually edit the XML file in a text editor, however this is not recommended since it could render the file unreadable to MODAQ. The Configurator runs on the user's local computer and the resulting XML file must be moved to MODAQ manually. MODAQ will expect to find the file (MODAQ RD Configuration File.xml) in the root folder of the storage drive located at /media/sdb1/. Ironically, the location and name of the configuration file are hard-coded in MODAQ and cannot be changed in the Configurator. When MODAQ starts up, it auto-archives a copy of the loaded configuration to the /media/sdb1/Logs/ folder. This provides a reference of what configurations were applied for any given run.","title":"Configurator"},{"location":"ref_design/#local-storage","text":"The NI-9049 cRIO controller has 16GB of onboard storage and also contains an SD card slot. Paths to the preferred data storage location can be set in the Configurator. Since the onboard storage is relatively small and shared with the Real-Time Linux operating system it's not recommended to use this storage for measurement data. An SD card is a viable option, but these can be slow and have reliability issues. National Instruments specifies industrial UHS-I SD cards for the cRIO controller with capacities up to 32 GB. The preferred option is to use an SSD drive connected to one of the USB 3.1 Type-C ports (the USB-A port is limited to USB 2.0 specification) on the controller. This way, speed and capacity are no longer an issue.","title":"Local Storage"},{"location":"ref_design/#tdms","text":"All measurement data generated in MODAQ is saved to the binary TDMS format. As mentioned in the Software Architecture section, TDMS can be read in Excel (with this plug in ), MATLAB , and python , or TDMS data can be viewed, manipulated, and exported with 3rd party tools such as Scout . See the technical reference section for more detail on how TDMS is used in MODAQ.","title":"TDMS"},{"location":"ref_design/#summary-files","text":"In addition to the binary TDMS files, most MODAQ modules also create a comma separated value (CSV) text file called a summery file. These are \"summary\" files in the sense that in most cases they contain sub-sampled, resampled, or statistical versions of the raw measurement data that are easier to upload over low bandwidth connections. Summary file upload interval can be set in the Configurator.","title":"Summary Files"},{"location":"ref_design/#aws-s3","text":"MODAQ uses AWS S3 for programmatic data transfers. Users can independently enable S3 uploads of the TDMS and summary files in the Configurator. They can also set their AWS access and secret keys, as well as the desired S3 bucket. Since TDMS files can become large, users should evaluate available network bandwidth and data transfer costs before enabling the TDMS upload option. Slow TDMS file transfers could impact measurement determinism and in some cases, data may be generated at a rate faster than the available transfer speed.","title":"AWS S3"},{"location":"ref_design/#email","text":"Various events within MODAQ can be set to issue an email alert to a distribution list. This is useful for monitoring for exception conditions and users are encouraged to set email alerts judiciously in order to avoid email fatigue. Settings for the email server address, account credentials, and distribution list email addresses are done in the Configurator.","title":"Email"},{"location":"ref_design/#watch-circle","text":"MODAQ:RD includes a watch circle feature. Since most field deployments are quasi-stationary, like in the case of a surface buoy, the watch circle can alert users by email if the device moves beyond a preset distance from its mooring location. Watch circle preferences and alert radii are set in the Configurator. The Spatial Dual also includes a dual GPS receiver, which can not only give highly precise positioning data but also determine heading. It also covers both the positioning and attitude tasks and has internal sensor fusion to control IMU drift. \u21a9 32 bit LabVIEW is required, since the 64 bit does not support the Real-Time Module. \u21a9","title":"Watch Circle"},{"location":"s_architecture/","text":"MODAQ Software Architecture Many of the following topics are discussed in detail in the Technical Reference section of this document. The primary controller software for MODAQ is written in National Instruments LabVIEW. With its long history in the industrial testing sector, LabVIEW is known for stability, performance, and ease of rapid software development. MODAQ leverages the power of LabVIEW to enable advanced software features that would be considerably more difficult to implement in other programming environments. Depending on the design specification, some MODAQ features may be implemented in the onboard FPGA chip, however MODAQ's core functionality is run on the cRIO's Real-Time Linux target. Modularity The modularity of MODAQ is realized in the software architecture where functionality can added/removed from MODAQ to provide the required features. Modules, called subVIs 1 in LabVIEW, are used in MODAQ to encapsulate functions such as reading a sensor or writing data to a binary file. Multitasking MODAQ makes extensive use of LabVIEW's multitasking capability, with most processes running in its own concurrent task. Each of these processes can have independent timing (loop or sample rates) or be synchronized to a common source. In addition, prioritization can be enforced to assure determinism for critical tasks. Timing and Synchronization MODAQ is highly performant- even with complex designs. Much care goes into assuring data are timestamped to a reliable reference and samples are tightly synchronized. For very demanding applications, specialized hardware and programming considerations may be necessary to achieve expected performance. See [LINK] section in the Technical Reference section for more detail. Interprocess Communications While tasks are run as individual parallel processes, MODAQ provides several mechanisms to allow for interprocess communications. These mechanisms fall into the following categories: Blocking - process waits for message/data. This is usually the case for a \"consumer\" loop, which acts on an output from another \"producer\" task. Broadcast - A signal or flag that may be actioned by one or more tasks. Messaging - A common buss for passing formatted messages, such as log events and email alerts. Control and Automation MODAQ can include hardware output modules and perform control actions. These can be simple if-then type rules, PID, or very complex state machines. Since controlling external things is highly dependent on individual project requirements, control features are not included in the MODAQ Core distribution. While MODAQ can perform complex control operations similar to a SCADA, MODAQ systems furnished by NREL are not intended to be the MRE device's primary control system. This is partly due to liability concerns, but mostly because the control system is responsible for the performance and character of the device and usually involves proprietary or uniquely specialized algorithms. Users who choose to leverage the MODAQ reference design independently are free to extend the code as they feel fit. Examples of MODAQ control logic are available upon request or see this document regarding MODAQ SCADA for Columbia Power. QC and Threshold Monitoring Any data channel within MODAQ can be piped through basic quality control screening, with violations flagged for later action. Unless there's a compelling reason to do QC screening onboard, it is recommended to screen the data once uploaded to MODAQ:Cloud, since onboard screening increases the file sizes and can impact performance. Instead (or in addition to), MODAQ can be configured to monitor thresholds and/or apply simple rules to acquired data and write violations to a log file and/or send an email alert. Execution MODAQ runs \"headless\" 2 on the real-time Linux target on the cRIO hardware as a compiled executable, however it can also be run in an interactive mode 3 which is useful for debugging and laboratory/bench testing. Since interactive mode can be processor and bandwidth intensive, it's not recommended for production/field applications. If interactivity or near real time monitoring is desired, consider the available HMI or MODAQ:Web options. Configuration MODAQ includes an offline configuration utility for setting values, such as thresholds, scaling factors, and channel names and to set operational preferences. The Configurator generates an XML document of the settings that is loaded when MODAQ starts. Since it's a plain text XML file, quick changes to contents can be done outside of the Configurator in any text editing app. Data Destinations While MODAQ could save data in most common formats, TDMS is the format supported by MODAQ for most data save operations. TDMS is a binary format that was developed by National Instruments and there are plugins or libraries available to read TDMS in MS Excel, Matlab, and Python. TDMS is also supported by MODAQ:Cloud and MHKiT. In addition to TDMS, MODAQ can also create summary files, which are CSV text files that contain select downsampled measurement data and system status. Summary files are ideal for sending data to monitor a deployment over a bandwidth-constrained internet connection. They can also be ingested in MODAQ:Web for an operational monitoring dashboard. Communications MODAQ can be configured for a variety of communications pathways, including cellular, WIFI, ethernet, and fiber optic. Users can configure which files to upload based on available bandwidth and data charges. HMI While there are a few ways to implement an HMI in LabVIEW, MODAQ leverages the G Web Development Software (formerly LabVIEW NXG Web Module) and web server support on the cRIO to build HMIs that can be displayed in a standard web browser. To access the HMI, clients need to be on the same network as MODAQ. A simple implementation of the MODAQ HMI is included with the Reference Design source code. MInor changes of the HMI could be accomplished by modifying the HTML or JavaScript files, however a G Web Development license will be necessary for more extensive changes. Remote Supervision MODAQ can be equipped with a network gateway that includes an OpenVPN server. Assuming sufficient bandwidth, operators can connect to MODAQ to perform remote maintenance, upload new code, change configuration settings, view the HMI, and download data files. In LabVIEW, a \"program\" is called a VI or Virtual Instrument. If a VI is contained within a VI, it's known as a subVI. This is similar to a function in other languages. The use of subVIs is a way to simplify the appearance of the application's block diagram (which itself is the source code view of the app) and encapsulating functional elements for modularity and reuse. \u21a9 Headless Mode: Also known as embedded mode- there is no directly connected display or keyboard/mouse. MODAQ is run as an executable, with all Graphical User Interface (GUI) elements excluded at compile time. This mode provides the best performance. \u21a9 Interactive Mode: LabVIEW makes it very easy to create a GUI, complete with plots, live updating indicators, and interactive controls. However, these can result in a performance hit, particularly if a lot of data are streamed to the GUI elements. There are ways to minimize these impacts, but deployments should done in Headless Mode. \u21a9","title":"Software Overview"},{"location":"s_architecture/#modaq-software-architecture","text":"Many of the following topics are discussed in detail in the Technical Reference section of this document. The primary controller software for MODAQ is written in National Instruments LabVIEW. With its long history in the industrial testing sector, LabVIEW is known for stability, performance, and ease of rapid software development. MODAQ leverages the power of LabVIEW to enable advanced software features that would be considerably more difficult to implement in other programming environments. Depending on the design specification, some MODAQ features may be implemented in the onboard FPGA chip, however MODAQ's core functionality is run on the cRIO's Real-Time Linux target.","title":"MODAQ Software Architecture"},{"location":"s_architecture/#modularity","text":"The modularity of MODAQ is realized in the software architecture where functionality can added/removed from MODAQ to provide the required features. Modules, called subVIs 1 in LabVIEW, are used in MODAQ to encapsulate functions such as reading a sensor or writing data to a binary file.","title":"Modularity"},{"location":"s_architecture/#multitasking","text":"MODAQ makes extensive use of LabVIEW's multitasking capability, with most processes running in its own concurrent task. Each of these processes can have independent timing (loop or sample rates) or be synchronized to a common source. In addition, prioritization can be enforced to assure determinism for critical tasks.","title":"Multitasking"},{"location":"s_architecture/#timing-and-synchronization","text":"MODAQ is highly performant- even with complex designs. Much care goes into assuring data are timestamped to a reliable reference and samples are tightly synchronized. For very demanding applications, specialized hardware and programming considerations may be necessary to achieve expected performance. See [LINK] section in the Technical Reference section for more detail.","title":"Timing and Synchronization"},{"location":"s_architecture/#interprocess-communications","text":"While tasks are run as individual parallel processes, MODAQ provides several mechanisms to allow for interprocess communications. These mechanisms fall into the following categories: Blocking - process waits for message/data. This is usually the case for a \"consumer\" loop, which acts on an output from another \"producer\" task. Broadcast - A signal or flag that may be actioned by one or more tasks. Messaging - A common buss for passing formatted messages, such as log events and email alerts.","title":"Interprocess Communications"},{"location":"s_architecture/#control-and-automation","text":"MODAQ can include hardware output modules and perform control actions. These can be simple if-then type rules, PID, or very complex state machines. Since controlling external things is highly dependent on individual project requirements, control features are not included in the MODAQ Core distribution. While MODAQ can perform complex control operations similar to a SCADA, MODAQ systems furnished by NREL are not intended to be the MRE device's primary control system. This is partly due to liability concerns, but mostly because the control system is responsible for the performance and character of the device and usually involves proprietary or uniquely specialized algorithms. Users who choose to leverage the MODAQ reference design independently are free to extend the code as they feel fit. Examples of MODAQ control logic are available upon request or see this document regarding MODAQ SCADA for Columbia Power.","title":"Control and Automation"},{"location":"s_architecture/#qc-and-threshold-monitoring","text":"Any data channel within MODAQ can be piped through basic quality control screening, with violations flagged for later action. Unless there's a compelling reason to do QC screening onboard, it is recommended to screen the data once uploaded to MODAQ:Cloud, since onboard screening increases the file sizes and can impact performance. Instead (or in addition to), MODAQ can be configured to monitor thresholds and/or apply simple rules to acquired data and write violations to a log file and/or send an email alert.","title":"QC and Threshold Monitoring"},{"location":"s_architecture/#execution","text":"MODAQ runs \"headless\" 2 on the real-time Linux target on the cRIO hardware as a compiled executable, however it can also be run in an interactive mode 3 which is useful for debugging and laboratory/bench testing. Since interactive mode can be processor and bandwidth intensive, it's not recommended for production/field applications. If interactivity or near real time monitoring is desired, consider the available HMI or MODAQ:Web options.","title":"Execution"},{"location":"s_architecture/#configuration","text":"MODAQ includes an offline configuration utility for setting values, such as thresholds, scaling factors, and channel names and to set operational preferences. The Configurator generates an XML document of the settings that is loaded when MODAQ starts. Since it's a plain text XML file, quick changes to contents can be done outside of the Configurator in any text editing app.","title":"Configuration"},{"location":"s_architecture/#data-destinations","text":"While MODAQ could save data in most common formats, TDMS is the format supported by MODAQ for most data save operations. TDMS is a binary format that was developed by National Instruments and there are plugins or libraries available to read TDMS in MS Excel, Matlab, and Python. TDMS is also supported by MODAQ:Cloud and MHKiT. In addition to TDMS, MODAQ can also create summary files, which are CSV text files that contain select downsampled measurement data and system status. Summary files are ideal for sending data to monitor a deployment over a bandwidth-constrained internet connection. They can also be ingested in MODAQ:Web for an operational monitoring dashboard.","title":"Data Destinations"},{"location":"s_architecture/#communications","text":"MODAQ can be configured for a variety of communications pathways, including cellular, WIFI, ethernet, and fiber optic. Users can configure which files to upload based on available bandwidth and data charges.","title":"Communications"},{"location":"s_architecture/#hmi","text":"While there are a few ways to implement an HMI in LabVIEW, MODAQ leverages the G Web Development Software (formerly LabVIEW NXG Web Module) and web server support on the cRIO to build HMIs that can be displayed in a standard web browser. To access the HMI, clients need to be on the same network as MODAQ. A simple implementation of the MODAQ HMI is included with the Reference Design source code. MInor changes of the HMI could be accomplished by modifying the HTML or JavaScript files, however a G Web Development license will be necessary for more extensive changes.","title":"HMI"},{"location":"s_architecture/#remote-supervision","text":"MODAQ can be equipped with a network gateway that includes an OpenVPN server. Assuming sufficient bandwidth, operators can connect to MODAQ to perform remote maintenance, upload new code, change configuration settings, view the HMI, and download data files. In LabVIEW, a \"program\" is called a VI or Virtual Instrument. If a VI is contained within a VI, it's known as a subVI. This is similar to a function in other languages. The use of subVIs is a way to simplify the appearance of the application's block diagram (which itself is the source code view of the app) and encapsulating functional elements for modularity and reuse. \u21a9 Headless Mode: Also known as embedded mode- there is no directly connected display or keyboard/mouse. MODAQ is run as an executable, with all Graphical User Interface (GUI) elements excluded at compile time. This mode provides the best performance. \u21a9 Interactive Mode: LabVIEW makes it very easy to create a GUI, complete with plots, live updating indicators, and interactive controls. However, these can result in a performance hit, particularly if a lot of data are streamed to the GUI elements. There are ways to minimize these impacts, but deployments should done in Headless Mode. \u21a9","title":"Remote Supervision"},{"location":"tech_ref/","text":"MODAQ Technical Reference This section will discuss specific MODAQ technologies in greater detail and is provided for the curious end user to better understand how MODAQ works and why certain design decisions were made. Over the course of MODAQ development many options and challenges had presented and there was often often more than one way to achieve similar results. As always, options have trade-offs and a different design team may have made different decisions. In some cases, options, shortcomings, and/or suggestions will be presented and since the MODAQ reference design and software are offered in the public domain as \"open source\", experienced LabVIEW developers are encouraged to modify or improve this code base and perhaps implement features in a more efficient and performant manner. It would be appreciated if such improvements are made, that the developers contribute back to this project. Software Architecture Initialization Input Reads Data Filters Data Destinations Timing and Synchronization TDMS Due to the modular nature of MODAQ, each process saves to its own TDMS file. Summary Files Summary overwrites System Log Email Notifications configuring, snoozing, rules based Metadata SFTP/FTP MODAQ does not currently support SFTP at this time due to limitations in LabVIEW 2019. However, the underlying RT Linux operating system does. Users familiar with SFTP and the Linux command line could develop solutions for automated file transfers. For manual transfers, client software such as WinSCP, Bitvise, FileZilla could be used. Due to the inherent lack of security, FTP in not included by default in MODAQ. NREL, like most other organizations with managed IT departments, prohibits the use of FTP. Users willing to accept the risk, can request the MODAQ FTP module- or write their own. SSH Watch Circle Haversign formula, radii","title":"Technical Reference"},{"location":"tech_ref/#modaq-technical-reference","text":"This section will discuss specific MODAQ technologies in greater detail and is provided for the curious end user to better understand how MODAQ works and why certain design decisions were made. Over the course of MODAQ development many options and challenges had presented and there was often often more than one way to achieve similar results. As always, options have trade-offs and a different design team may have made different decisions. In some cases, options, shortcomings, and/or suggestions will be presented and since the MODAQ reference design and software are offered in the public domain as \"open source\", experienced LabVIEW developers are encouraged to modify or improve this code base and perhaps implement features in a more efficient and performant manner. It would be appreciated if such improvements are made, that the developers contribute back to this project.","title":"MODAQ Technical Reference"},{"location":"tech_ref/#software-architecture","text":"","title":"Software Architecture"},{"location":"tech_ref/#initialization","text":"","title":"Initialization"},{"location":"tech_ref/#input-reads","text":"","title":"Input Reads"},{"location":"tech_ref/#data-filters","text":"","title":"Data Filters"},{"location":"tech_ref/#data-destinations","text":"","title":"Data Destinations"},{"location":"tech_ref/#timing-and-synchronization","text":"","title":"Timing and Synchronization"},{"location":"tech_ref/#tdms","text":"Due to the modular nature of MODAQ, each process saves to its own TDMS file.","title":"TDMS"},{"location":"tech_ref/#summary-files","text":"Summary overwrites","title":"Summary Files"},{"location":"tech_ref/#system-log","text":"","title":"System Log"},{"location":"tech_ref/#email-notifications","text":"configuring, snoozing, rules based","title":"Email Notifications"},{"location":"tech_ref/#metadata","text":"","title":"Metadata"},{"location":"tech_ref/#sftpftp","text":"MODAQ does not currently support SFTP at this time due to limitations in LabVIEW 2019. However, the underlying RT Linux operating system does. Users familiar with SFTP and the Linux command line could develop solutions for automated file transfers. For manual transfers, client software such as WinSCP, Bitvise, FileZilla could be used. Due to the inherent lack of security, FTP in not included by default in MODAQ. NREL, like most other organizations with managed IT departments, prohibits the use of FTP. Users willing to accept the risk, can request the MODAQ FTP module- or write their own.","title":"SFTP/FTP"},{"location":"tech_ref/#ssh","text":"","title":"SSH"},{"location":"tech_ref/#watch-circle","text":"Haversign formula, radii","title":"Watch Circle"}]}